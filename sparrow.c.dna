function data_buffer_definitions() {
./!dots(1)

struct data_out_t {
  size_t cur;
  void * data;
  size_t len;    //Len indicates that there is an output request.
};

struct data_in_t { 
  void * data;
  size_t len;   //Len indicates that there is an input request.
};

typedef struct data_out_t data_out_t;
typedef struct data_in_t data_in_t;

./!dots(-1)
}
function sparrow_socket_definition() {
./!dots(1)
struct sparrow_socket_t {
  int listening; //BOOL
  int fd;
  int64_t out_expiry;
  data_out_t data_out;
  data_in_t data_in;
  RB_ENTRY (sparrow_socket_t) fd_field;
  RB_ENTRY (sparrow_socket_t) ot_field;
  void * parent; // a pointer to the higher level structure.
};

typedef struct sparrow_socket_t sparrow_socket_t;
./!dots(-1)
}
function sparrow_definition() {
./!dots(1)
struct sparrow_t {
  int fd;
  int event_cur;
  int is_cur_output; // On the output loop or on the input loop.
  int events_len;
  struct epoll_event events [MAX_EVENTS];
  struct fd_rb_t fd_rb_socks; // A tree container of sockets ordered by the fd.
  struct ot_rb_t ot_rb_socks; // A tree container of sockets ordered by the expiration if their outputs.
  int64_t default_ot;
  int64_t t_expiry;  // The time that the timeout expires.
  int64_t oltime; //Last time we checked for output expirations.
};
./!dots(-1)
}
function tree_generation() {
./!dots(1)

int cmp_fds(const void * sock1, const void * sock2) {
  const sparrow_socket_t * s1 = (const sparrow_socket_t *) sock1;
  const sparrow_socket_t * s2 = (const sparrow_socket_t *) sock2;
  return (s1-%gtfd %gt s2-%gtfd) - (s1-%gtfd %lt s2-%gtfd);
}

RB_HEAD (fd_rb_t, sparrow_socket_t);
RB_GENERATE (fd_rb_t, sparrow_socket_t, fd_field, cmp_fds);

int cmp_ots(const void * sock1, const void * sock2) {
  const sparrow_socket_t * s1 = (const sparrow_socket_t *) sock1;
  const sparrow_socket_t * s2 = (const sparrow_socket_t *) sock2;
  return (s1-%gtfd %gt s2-%gtfd) - (s1-%gtfd %lt s2-%gtfd);
}

RB_HEAD (ot_rb_t, sparrow_socket_t);
RB_GENERATE (ot_rb_t, sparrow_socket_t, ot_field, cmp_ots);

./!dots(-1)
}
function external_socket_traversal() {
./!dots(1)

//Used to iterate over all sockets.
sparrow_socket_t * sparrow_first(sparrow_t * sp) {
  return RB_MIN(fd_rb_t, &(sp-%gtfd_rb_socks));
}

sparrow_socket_t * sparrow_next(sparrow_t * sp, sparrow_socket_t * sock) {
  return RB_NEXT(fd_rb_t, &(sp-%gtfd_rb_socks), sock);
}

./!dots(-1)
}
function sparrow_send_receive() {
./!dots(1)

int sparrow_send( sparrow_t * sp, sparrow_socket_t * sock, void * data, size_t len, sparrow_event_t * spev) {

  assert(data!=NULL);
  spev-%gtsock = sock;
  spev-%gtfd = sock-%gtfd;
  spev-%gtparent = sock-%gtparent;
  spev-%gtevent = 0;

  data_out_t *data_out = &(sock-%gtdata_out);
  assert(data_out-%gtlen == 0);
  data_out-%gtdata = data;
  data_out-%gtlen = len;
  data_out-%gtcur = 0;

//Try to send as much as we can.

  Dprintf("Send msg size: %lu\n", data_out-%gtlen - data_out-%gtcur);
  int result = send(sock-%gtfd, data_out-%gtdata + data_out-%gtcur, data_out-%gtlen - data_out-%gtcur, 0);

  //On error
  if(result %lt 0 && (errno != EAGAIN)) {
    perror("Send error inside sparrow_send.\n");
    sparrow_socket_close(sp,sock);
    spev-%gtevent = 8;
    return 0;
  }

  if(result + data_out-%gtcur %lt data_out-%gtlen) {
    if(result %gt 0) {
      data_out-%gtcur += result;
    }

    struct epoll_event pevent = {0};
    pevent.data.fd = sock-%gtfd;
    pevent.events = EPOLLIN | EPOLLOUT;
    int rc = epoll_ctl (sp-%gtfd, EPOLL_CTL_MOD, sock-%gtfd, &pevent);
    if (rc == -1) {
      perror(" epoll_ctl failed to modify a socket to epoll");
      exit(-1);
    }

    //We add the socket to the output expiration tree.
    sock-%gtout_expiry = now() + sp-%gtdefault_ot;
    RB_INSERT(ot_rb_t, &(sp-%gtot_rb_socks), sock);
    Dprintf("I have more to send. Adding the socket to output expiry.\n");
    
    return 0;

  } else {
    data_out-%gtlen = 0;
    spev-%gtevent = 2;
    return 1;
  }

}

void sparrow_cancel_send( sparrow_t * sp, sparrow_socket_t * sock) {
  data_out_t *data_out = &(sock-%gtdata_out);
  assert(data_out-%gtlen != 0);
  data_out-%gtlen = 0;

  struct epoll_event pevent;
  pevent.data.fd = sock-%gtfd;
  pevent.events = EPOLLIN;
  int rc = epoll_ctl (sp-%gtfd, EPOLL_CTL_MOD, sock-%gtfd, &pevent);
  if (rc == -1) {
    perror(" epoll_ctl failed to modify a socket to epoll");
    exit(-1);
  }
}

void sparrow_recv( sparrow_t * sp, sparrow_socket_t * sock, void *data, size_t len) {

  Dprintf("Asking to receive socket:\nfd: %d\n",sock-%gtfd);
  data_in_t *data_in = &(sock-%gtdata_in);
  assert(data_in-%gtlen == 0);
  data_in-%gtdata = data;
  data_in-%gtlen = len;
}

void sparrow_cancel_recv( sparrow_t * sp, sparrow_socket_t * sock) {
  data_in_t *data_in = &(sock-%gtdata_in);
  assert(data_in-%gtlen != 0);
  data_in-%gtlen = 0;
}

void * sparrow_socket_data_in(sparrow_socket_t *sock) {
  void *data = sock-%gtdata_in.data; 
  return data;
}

void * sparrow_socket_data_out(sparrow_socket_t *sock) {
  void *data = sock-%gtdata_out.data; 
  return data;
}

./!dots(-1)
}
function sparrow_socket_parent_reference() {
./!dots(1)

void sparrow_socket_set_parent(sparrow_socket_t * sock, void * parent) {
  sock-%gtparent = parent;
}

void * sparrow_socket_get_parent(sparrow_socket_t * sock) {
  return sock-%gtparent;
}

./!dots(-1)
}

function set_timeout_function() {
./!dots(1)

//The timeout should be changed when the data have been sent received. It is the job of the serializer/multiplexer to do that but care must be taken to do it correctly. TODO update the comment
void sparrow_set_timeout(sparrow_t * sp, int64_t timeout) {
  if(timeout %gt 0) {
    sp-%gtt_expiry = now() + timeout;
  } else {
    sp-%gtt_expiry = -1;
  }
}

./!dots(-1)
}
function change_of_TCP_state_functions() {
./!dots(1)

//internal use only.
sparrow_t * sparrow_new(int64_t dtimeout) {
  sparrow_t * sp = scalloc(1, sizeof(sparrow_t));
  int fd = epoll_create1 (0);
  if (fd == -1) {
    perror("epoll_create1 failed to create epoll.");
    exit(-1);
  }
  sp-%gtfd = fd;
  sp-%gtevents_len = 0;
  RB_INIT(&(sp-%gtfd_rb_socks));
  RB_INIT(&(sp-%gtot_rb_socks));
  sp-%gtt_expiry = -1;
  sp-%gtoltime = now();
  sp-%gtdefault_ot = dtimeout;
  return sp;
}


//internal use only.
sparrow_socket_t * sparrow_socket_new(int fd) {
  sparrow_socket_t * sock = scalloc(1, sizeof(sparrow_socket_t));
  sock-%gtfd = fd;
  sock-%gtout_expiry = -1;
  sock-%gtlistening = 0;
  sock-%gtparent = NULL;
  return sock;
}


//internal use only
void sparrow_add_socket(sparrow_t * sp, sparrow_socket_t *sock) {
  int rc;
  struct epoll_event event = {0};
  event.data.fd = sock-%gtfd;
  event.events = EPOLLIN;
  rc = epoll_ctl (sp-%gtfd, EPOLL_CTL_ADD, sock-%gtfd, &event);
  if (rc == -1) {
    perror(" epoll_ctl failed to add a socket to epoll");
    exit(-1);
  }
  assert(RB_FIND(fd_rb_t, &(sp-%gtfd_rb_socks), sock) == NULL);
  void *rtsearch = RB_INSERT(fd_rb_t, &(sp-%gtfd_rb_socks), sock);
  assert(rtsearch == NULL);
}


//internal use only
sparrow_socket_t * sparrow_socket_set_non_blocking(sparrow_socket_t * sock) {
  int flags, rc;

  flags = fcntl (sock-%gtfd, F_GETFL, 0);
  if (flags == -1) {
    perror ("fcntl failed to perform an action.");
    exit(-1);
  }

  flags |= O_NONBLOCK;
  rc = fcntl (sock-%gtfd, F_SETFL, flags);
  if (rc == -1) {
    perror ("fcntl failed to perform an action.");
    exit(-1);
  }
  return sock;
}

//internal function
sparrow_socket_t * sparrow_socket_listen(sparrow_socket_t * sock) {
  int rc = listen(sock-%gtfd,SOMAXCONN);
  if ( rc == -1 ) {
    perror("The socket failed to listen.");
    exit(-1);
  }
  sock-%gtlistening = 1;
  sock-%gtparent = NULL;
  return sock;
}

void sparrow_socket_bind(sparrow_t * sp, char * port) {
  struct addrinfo hints = {0};
  struct addrinfo *ret_addr;
  int rc, sfd;
  int flag = 1;

  hints.ai_family = AF_UNSPEC;
  hints.ai_socktype = SOCK_STREAM;
  hints.ai_flags = AI_PASSIVE;

  rc = getaddrinfo (NULL, port, &hints, &ret_addr);
  assert(rc == 0);

  sfd = socket (ret_addr-%gtai_family, ret_addr-%gtai_socktype, ret_addr-%gtai_protocol);
  assert(sfd != -1);
  
  rc = setsockopt(sfd,IPPROTO_TCP,TCP_NODELAY, (char *) &flag,sizeof(int));
  assert(rc == 0);
  rc = setsockopt(sfd,SOL_SOCKET,SO_REUSEPORT, (char *) &flag,sizeof(int));
  assert(rc == 0);

  struct linger ling_flag;
  ling_flag.l_onoff = 1;
  ling_flag.l_linger = sp-%gtdefault_ot / 1000;
  rc = setsockopt(sfd,SOL_SOCKET,SO_LINGER, (char *) &ling_flag,sizeof(struct linger));
  assert(rc == 0);

  rc = bind (sfd, ret_addr-%gtai_addr, ret_addr-%gtai_addrlen);
  if (rc != 0) {
    close (sfd);
    exit(-1);
  }
  sparrow_socket_t * sock = sparrow_socket_new(sfd);
  freeaddrinfo (ret_addr);
  sparrow_socket_set_non_blocking(sock); 
  sparrow_add_socket(sp,sock);
  sparrow_socket_listen(sock);
}



sparrow_socket_t * sparrow_socket_connect(sparrow_t * sp, char * address, char * port) {
  struct addrinfo hints = {0};
  struct addrinfo *ret_addr;
  int rc, sfd;
  int flag = 1;

  hints.ai_family = AF_UNSPEC;
  hints.ai_socktype = SOCK_STREAM;
  hints.ai_flags = AI_PASSIVE;

  rc = getaddrinfo (address, port, &hints, &ret_addr);
  assert(rc == 0);

  sfd = socket (ret_addr-%gtai_family, ret_addr-%gtai_socktype, ret_addr-%gtai_protocol);
  assert(sfd != -1);

  rc = setsockopt(sfd,IPPROTO_TCP,TCP_NODELAY, (char *) &flag,sizeof(int));
  assert(rc == 0);

  struct linger ling_flag;
  ling_flag.l_onoff = 1;
  ling_flag.l_linger = sp-%gtdefault_ot / 1000;
  rc = setsockopt(sfd,SOL_SOCKET,SO_LINGER, (char *) &ling_flag,sizeof(struct linger));
  assert(rc == 0);


  rc = connect (sfd, ret_addr-%gtai_addr, ret_addr-%gtai_addrlen);
  if (rc != 0) {
    close (sfd);
    return NULL;
  }
  sparrow_socket_t * sock = sparrow_socket_new(sfd);
  freeaddrinfo (ret_addr);
  sparrow_socket_set_non_blocking(sock); 
  sparrow_add_socket(sp,sock);
  return sock;
}

void sparrow_socket_close(sparrow_t * sp, sparrow_socket_t * sock) {
  printf("Connection closed: %d\n", sock-%gtfd);
  close(sock-%gtfd);
//  assert(sock-%gtdata_in.len == 0);
  RB_REMOVE(fd_rb_t, &(sp-%gtfd_rb_socks), sock);
  if(sock-%gtout_expiry %gt -1) {
    RB_REMOVE(ot_rb_t, &(sp-%gtot_rb_socks), sock);
  }
  free(sock);
}

void sparrow_close(sparrow_t ** sp) {
  sparrow_socket_t * sock;
  sparrow_socket_t * y;
  RB_FOREACH_SAFE(sock, fd_rb_t, &((*sp)-%gtfd_rb_socks), y) {
    sparrow_socket_close(*sp, sock);
  }
  close((*sp)-%gtfd);
  free(*sp);
  *sp = NULL;
}

//internal use only.
sparrow_socket_t * sparrow_socket_accept(sparrow_t * sp, sparrow_socket_t * lsock) {
  int nsfd = accept4(lsock-%gtfd,NULL,NULL,SOCK_NONBLOCK);
  assert(nsfd != -1);
  sparrow_socket_t * sock = sparrow_socket_new(nsfd);
  sparrow_add_socket(sp,sock);
  return sock;
}


./!dots(-1)
}
function sparrow_handle_ot_errors() {
./!dots(1)

        //Internal use only
int sparrow_handle_expired_ot(sparrow_t * sp, sparrow_event_t *spev, int64_t *timeout){
  int64_t time = now();

  if(time - sp-%gtoltime %gt MIN_OTIMEOUT_SAMPLE_INTERVAL) {
    Dprintf("I am checking if there are output expiries\n");
    sparrow_socket_t * sock = RB_MIN(ot_rb_t, &(sp-%gtot_rb_socks));
    if(sock !=NULL) {
    Dprintf("There is a socket to check for output expiration\n");
      if(sock-%gtout_expiry - time %lt 0) {
        printf("Output expiration error\n");
        RB_REMOVE(ot_rb_t, &(sp-%gtot_rb_socks), sock);
        spev-%gtsock = NULL;
        spev-%gtfd = sock-%gtfd;
        spev-%gtparent = sock-%gtparent;
        sparrow_socket_close(sp, sock);
        spev-%gtevent = 8;
        return 1;
      }
      //If there is no new expirations update the time.
      sp-%gtoltime = time;
      if((sp-%gtt_expiry %lt 0) || (sock-%gtout_expiry %lt sp-%gtt_expiry)) {
        *timeout = sock-%gtout_expiry - time;
        return 0;
      }
    }
  }
  if(sp-%gtt_expiry %lt 0) {
    *timeout = -1;
  } else {
    *timeout = sp-%gtt_expiry - time;
    if(*timeout %lt 0) {
      *timeout = 0;
    }
  }
  return 0;
}

./!dots(-1)
}
function sparrow_wait_function() {
./!dots(1)

//internal use in sparrow_wait
sparrow_socket_t * find_sock(sparrow_t * sp, sparrow_event_t * spev, int fd) {
  sparrow_socket_t find_sock;
  find_sock.fd = fd; 
  sparrow_socket_t * sock = RB_FIND(fd_rb_t, &(sp-%gtfd_rb_socks), &find_sock);

  spev-%gtsock = sock;
  spev-%gtfd = sock-%gtfd;
  spev-%gtparent = sock-%gtparent;

  return sock;
}

//Internal
//Requires an array of MAX_EVENT units.
int _sparrow_wait(sparrow_t * sp, sparrow_event_t * spev, int only_output) {
  spev-%gtevent = 0;
  int64_t timeout;

  if(sparrow_handle_expired_ot(sp, spev, &timeout)) {
    return 0;
  }

  // We immediately return if there are no outputs to send
  if(only_output) {
    timeout = MIN_OUTPUT_WAIT;
  }

  if(sp-%gtevents_len == 0) {
    Dprintf("Timeout: %ld\n", timeout);
    sp-%gtevent_cur = 0;
    sp-%gtis_cur_output = 1;
    sp-%gtevents_len = epoll_wait(sp-%gtfd, sp-%gtevents, MAX_EVENTS, timeout);

    if((sp-%gtt_expiry %gt= 0) && (sp-%gtt_expiry - now() %lt 0)) {
      sp-%gtt_expiry = -1;
      spev-%gtevent = 32;
      return 0;
    }
  }

  int i;
  if(sp-%gtis_cur_output) {
    for( i = sp-%gtevent_cur; i %lt sp-%gtevents_len; i++) {
      int event = sp-%gtevents[i].events;
  
  
        //On error
      if((event & EPOLLERR) || (event & EPOLLHUP)) {
        //The socket might have been destroyed even though we still had events to process.
        sparrow_socket_t * sock = find_sock(sp, spev, sp-%gtevents[i].data.fd);
        if(sock == NULL) {
          continue;
        }

        printf("EPOLLERR || EPOLLHUP error\n");
        sparrow_socket_close(sp, sock);
        spev-%gtevent = 8;
        sp-%gtevents[i].events = 0;

        sp-%gtevent_cur++;
        return 0;
      }

      if(event & EPOLLOUT) {
        //The socket might have been destroyed even though we still had events to process.
        sparrow_socket_t * sock = find_sock(sp, spev, sp-%gtevents[i].data.fd);
        if(sock == NULL) {
          continue;
        }

        data_out_t *data_out = &(sock-%gtdata_out);
        assert(data_out-%gtlen %gt data_out-%gtcur);
        assert(data_out-%gtlen != 0);
        Dprintf("Send msg size: %lu\n", data_out-%gtlen - data_out-%gtcur);
        int result = send(sock-%gtfd, data_out-%gtdata + data_out-%gtcur, data_out-%gtlen - data_out-%gtcur, 0);
  
        //On error
        if(result %lt 0) {
          sparrow_socket_close(sp,sock);
          spev-%gtevent = 8;
          sp-%gtevents[i].events = 0;
          printf("Send error inside _sparrow_wait.\n");
          sp-%gtevent_cur++;
          return 0;
        }
  
        if(result + data_out-%gtcur == data_out-%gtlen) {
          //We remove the socket from the output expiration tree.
          Dprintf("We remove the socket from the output expiration tree.\n");
          RB_REMOVE(ot_rb_t, &(sp-%gtot_rb_socks), sock);
          sock-%gtout_expiry = -1;
          data_out-%gtlen = 0;
  
          struct epoll_event pevent;
          pevent.data.fd = sock-%gtfd;
          pevent.events = EPOLLIN;
          int rc = epoll_ctl (sp-%gtfd, EPOLL_CTL_MOD, sock-%gtfd, &pevent);
          if (rc == -1) {
            perror(" epoll_ctl failed to modify a socket to epoll");
            exit(-1);
          }
          spev-%gtevent += 2;
          //Clear the bit
          sp-%gtevents[i].events &= ~EPOLLOUT;

          sp-%gtevent_cur++;
          return 0;
        } else {
          data_out-%gtcur += result;

          sp-%gtevent_cur++;
          return 1;
        }
      }
    }
    sp-%gtevent_cur = 0;
    sp-%gtis_cur_output = 0;
  } 

  if(!sp-%gtis_cur_output) {
    if(only_output) {
      sp-%gtevents_len = 0;
      //We do not care for the timeout. We immediately return.
      return 0;
    }

    for( i = sp-%gtevent_cur; i %lt sp-%gtevents_len; i++) {
      int event = sp-%gtevents[i].events;
  
      if(event & EPOLLIN) {

        //The socket might have been destroyed even though we still had events to process.
        sparrow_socket_t * sock = find_sock(sp, spev, sp-%gtevents[i].data.fd);
        if(sock == NULL) {
          continue;
        }


        if(sock-%gtlistening) {
        // We accept a new client.
          spev-%gtsock = sparrow_socket_accept(sp, sock);
          Dprintf("Listening Socket:\nfd:%d\n",sock-%gtfd);
          spev-%gtfd = spev-%gtsock-%gtfd;
          spev-%gtparent = spev-%gtsock-%gtparent;
          spev-%gtevent += 16;
          //Clear the bit
          sp-%gtevents[i].events &= ~EPOLLIN;

          sp-%gtevent_cur++;
          return 0;

        } else {
          data_in_t *data_in = &(sock-%gtdata_in);

          Dprintf("Receiving Socket:\nfd:%d\n",sock-%gtfd);
          
          //If we get data that we did not expect we close the connection. This could also happen when the other closes the connection.
          if(data_in-%gtlen == 0) {
            printf("We got data that we did not expect or we received a signal that the connection closed.\nWe are closing the connection.\n");
            sparrow_socket_close(sp,sock);
            spev-%gtevent = 8;
            sp-%gtevents[i].events = 0;

            sp-%gtevent_cur++;
            return 0;
          }
  
          int result = recv(sock-%gtfd, data_in-%gtdata , data_in-%gtlen , 0);
  
          //On error or connection closed.
          if(result %lt= 0) {
            printf("Receive error or we received a signal that the connection closed.\nWe are closing the connection.\n");
            sparrow_socket_close(sp,sock);
            spev-%gtevent = 8;
            sp-%gtevents[i].events = 0;

            sp-%gtevent_cur++;
            return 0;
          }
  
          spev-%gtcur = result;
          spev-%gtevent += 4;
          data_in-%gtlen = 0;
          sp-%gtevents[i].events &= ~EPOLLIN;

          sp-%gtevent_cur++;
          return 0;
        }
      }
    }
    sp-%gtevents_len = 0;
  }

  return 1;
}

void sparrow_wait(sparrow_t * sp, sparrow_event_t * spev, int only_output) {

  while(_sparrow_wait(sp, spev, only_output)) {
  }
}


./!dots(-1)
}
./!dots(1)

#define _GNU_SOURCE

#include %ltsys/epoll.h%gt
#include %lterrno.h%gt
#include %ltstdio.h%gt
#include %ltsys/socket.h%gt
#include %ltsys/types.h%gt
#include %ltnetdb.h%gt
#include %ltunistd.h%gt
#include %ltassert.h%gt
#include %ltstring.h%gt
#include %ltfcntl.h%gt
#include %ltstdlib.h%gt
#include %ltnetinet/in.h%gt
#include %ltnetinet/tcp.h%gt
#include "tree.h"
#include "sparrow.h"

#define MAX_EVENTS 32
// #define MAX_DELAY 40 //in milliseconds. We wait that much before sending new data if we do not have much data.
// #define MAX_BUFF (1500 - 68) // The ethernet MTU is 1500 bytes minus the IP/TCP headers.
// #define MAX_SEND_QUEUE 10
// #define MAX_INPUT_DELAY 20
#define MIN_OTIMEOUT_SAMPLE_INTERVAL 100
#define MIN_OUTPUT_WAIT 10

void * scalloc(size_t num, size_t size) {
  void * result = calloc(num, size);
  if(result == NULL) {
    exit(-1);
  }
  return result;
}

//TODO check for errors.
void * srealloc(void * prev_pointer, size_t size) {
  void * result = realloc(prev_pointer, size);
  if(result == NULL) {
    exit(-1);
  }
  return result;
}

./!dots(-1)
data_buffer_definitions(); 

sparrow_socket_definition();

tree_generation();

sparrow_definition();

external_socket_traversal();

set_timeout_function();

sparrow_send_receive();

sparrow_socket_parent_reference();

change_of_TCP_state_functions();

sparrow_handle_ot_errors(); 

sparrow_wait_function();

./!dots(1)

